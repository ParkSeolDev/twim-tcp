buildscript{
	ext {
		springBootVer = '2.7.1'
		querydslVer = '5.0.0'
		querydslPluginVer = '1.0.10'
		springDependencyMgmtVer = '1.0.11'
		springLoadedVer = '1.2.8'
		nodePluginVer = '1.3.1'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVer}"
		classpath "io.spring.gradle:dependency-management-plugin:${springDependencyMgmtVer}.RELEASE"
		classpath "org.springframework:springloaded:${springLoadedVer}.RELEASE"
		//이클립스인 경우를 위한 QueryDSL 플러그인. IntelliJ는 불필요. [시작]
		//classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVer}"
		//[끝] 
		classpath "com.github.node-gradle:gradle-node-plugin:3.1.0"
	}
}

plugins {
	id 'java'
	id 'idea'
	id 'org.springframework.boot' version "${springBootVer}"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'
apply plugin: 'com.github.node-gradle.node'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://repo.spring.io/milestone' }
	maven { url "https://repo.spring.io/libs-release" }
	maven { url "https://repo.maven.apache.org/maven2" }
	maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
	maven {
		url "https://jcenter.bintray.com"
	}
}
group = 'jpabook'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

node {
	download = true
	version = '14.17.0'
	// Set the work directory where node_modules should be located
	nodeModulesDir = file("${project.projectDir}/../frontend")
}

configurations {
	providedRuntime
}

/*task npmInstall(type: NpmTask, overwrite: true) {
    args = ['install']
}*/

//task webpack(type: NpmTask, dependsOn: 'npmInstall') {
//	args = ['run','build']
//}

// processResources is a Java task. Run the webpack bundling before this task using the 'build' task in the package.json
//processResources.dependsOn 'webpack'

//set build time and inject value to application.properties
def buildTime() {
	def date = new Date()
	def formattedDate = date.format('yyyyMMdd_HHmm')
	return formattedDate
}

project.ext.set("build.date", buildTime())

//processResources {
//	with copySpec {
//		from "src/main/resources"
//		include "**/application*.yml"
//		include "**/application*.yaml"
//		include "**/application*.properties"
//		project.properties.findAll().each {
//			prop ->
//				if (prop.value != null) {
//					filter(ReplaceTokens, tokens: [ (prop.key): String.valueOf(prop.value)])
//					filter(ReplaceTokens, tokens: [ ('project.' + prop.key): String.valueOf(prop.value)])
//					filter(ReplaceTokens, tokens: [ ('project.ext.' + prop.key): String.valueOf(prop.value)])
//				}
//		}
//	}
//}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-web:2.7.0')
	implementation('org.springframework.boot:spring-boot-starter-websocket:2.7.0')
	implementation('org.springframework.boot:spring-boot-starter-security:2.7.0')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa:2.7.0')
	implementation('org.springframework.boot:spring-boot-starter-actuator:2.7.0')
	implementation("org.springframework.plugin:spring-plugin-core:2.0.0.RELEASE")
	testImplementation('org.springframework.security:spring-security-test:5.7.1')
	annotationProcessor('org.springframework.boot:spring-boot-starter-data-jpa:2.7.0')
	runtimeOnly('mysql:mysql-connector-java')
	developmentOnly('org.springframework.boot:spring-boot-devtools:2.7.0')
	annotationProcessor('org.springframework.boot:spring-boot-configuration-processor:2.7.0')

	implementation('commons-io:commons-io:2.11.0')
	implementation("org.apache.commons:commons-collections4:4.4")
	implementation('org.apache.commons:commons-lang3:3.12.0')

	implementation("com.querydsl:querydsl-jpa:${querydslVer}")
	implementation("com.querydsl:querydsl-apt:${querydslVer}")


	//IntelliJ용
	//IntelliJ에서는 하기 annotationProcessor를 쓰면 별도의 querydsl 플러그인 및 플러그인 설정이 불필요.
	annotationProcessor("com.querydsl:querydsl-apt:${querydslVer}:jpa")

	implementation('com.squareup.retrofit2:retrofit:2.9.0')
	implementation('com.squareup.retrofit2:converter-jackson:2.9.0')
	implementation('com.squareup.okhttp3:logging-interceptor:4.10.0')

	implementation('com.google.guava:guava:31.1-jre')
	annotationProcessor('com.google.guava:guava:31.1-jre')

	testImplementation('com.jayway.jsonpath:json-path:2.7.0')

	implementation('com.auth0:java-jwt:3.19.2')

	implementation("io.springfox:springfox-swagger2:3.0.0")
	implementation("io.springfox:springfox-swagger-ui:3.0.0")
	implementation("io.springfox:springfox-data-rest:3.0.0")
	implementation("io.springfox:springfox-bean-validators:3.0.0")
	implementation("io.springfox:springfox-boot-starter:3.0.0")

//	compile('javax.annotation:javax.annotation-api:1.3.2')

	implementation('org.projectlombok:lombok:1.18.24')
	annotationProcessor('org.projectlombok:lombok:1.18.24')

	implementation('org.springframework.boot:spring-boot-starter-validation:2.7.0')

//	testCompile('org.springframework.boot:spring-boot-starter-test:2.7.0')

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
	implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.2'

//	// https://mvnrepository.com/artifact/javagrinko/tcp-spring-boot-starter
//	implementation 'javagrinko:tcp-spring-boot-starter:1.12'

	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-configuration-processor
	implementation 'org.springframework.boot:spring-boot-configuration-processor:2.7.1'


}

test {
	useJUnitPlatform()
}